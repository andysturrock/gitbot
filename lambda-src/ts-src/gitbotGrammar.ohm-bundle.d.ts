// AUTOGENERATED FILE
// This file was generated from gitbotGrammar.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface GitbotArgsActionDict<T> extends BaseActionDict<T> {
  Exp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  EmptyExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  HelpExp?: (this: NonterminalNode, arg0: TerminalNode) => T;
  LoginExp?: (this: NonterminalNode, arg0: TerminalNode) => T;
  ProjectExp?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  ProjectHelpExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ProjectConnectExp?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode) => T;
  ProjectIdentifierExp?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  projectNamePartNoQuote?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  projectNamePartQuote?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode, arg3: TerminalNode) => T;
}

export interface GitbotArgsSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: GitbotArgsActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: GitbotArgsActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: GitbotArgsActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: GitbotArgsActionDict<T>): this;
}

export interface GitbotArgsGrammar extends Grammar {
  createSemantics(): GitbotArgsSemantics;
  extendSemantics(superSemantics: GitbotArgsSemantics): GitbotArgsSemantics;
}

declare const grammar: GitbotArgsGrammar;
export default grammar;

